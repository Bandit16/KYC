@model KYC.ViewModels.KycFormViewModel
@{
ViewData["Title"] = "Create KYC";
}
<form asp-action="Create" method="post">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <h4>Personal Details</h4>
    <div class="form-group">
        <label asp-for="Member.FirstName"></label>
        <input asp-for="Member.FirstName" class="form-control" />
        <span asp-validation-for="Member.FirstName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.MiddleName"></label>
        <input asp-for="Member.MiddleName" class="form-control" />
        <span asp-validation-for="Member.MiddleName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Member.LastName"></label>
        <input asp-for="Member.LastName" class="form-control" />
        <span asp-validation-for="Member.LastName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Member.EmployeeId"></label>
        <input asp-for="Member.EmployeeId" class="form-control" />
        <span asp-validation-for="Member.EmployeeId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Member.DateOfBirth"></label>
        <input asp-for="Member.DateOfBirth" class="form-control" type="date" />
        <span asp-validation-for="Member.DateOfBirth" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.Gender"></label>
        <input asp-for="Member.Gender" class="form-control" />
        <span asp-validation-for="Member.Gender" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.CitizenshipNumber"></label>
        <input asp-for="Member.CitizenshipNumber" class="form-control" />
        <span asp-validation-for="Member.CitizenshipNumber" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.Nationality"></label>
        <input asp-for="Member.Nationality" class="form-control" />
        <span asp-validation-for="Member.Nationality" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.CitizenshipIssueDistrict"></label>
        <select asp-for="Member.CitizenshipIssueDistrict" class="form-control citizenship-district-dropdown">
            <option value="">-- Select District --</option>
        </select>
        <span asp-validation-for="Member.CitizenshipIssueDistrict" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.MobileNumber"></label>
        <input asp-for="Member.MobileNumber" class="form-control" />
        <span asp-validation-for="Member.MobileNumber" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Member.Email"></label>
        <input asp-for="Member.Email" class="form-control" type="email" />
        <span asp-validation-for="Member.Email" class="text-danger"></span>
    </div>
    <hr />


    @* Permanent Address (AddressFormViewModel) *@
    <h4>Permanent Address</h4>
    <div class="form-group">
        <label asp-for="PermanentAddress.SelectedProvince"></label>
        <select asp-for="PermanentAddress.SelectedProvince" class="form-control province-dropdown"
            data-district-dropdown-id="PermanentAddress_SelectedDistrict">
            <option value="">-- Select Province --</option>
        </select>
        <span asp-validation-for="PermanentAddress.SelectedProvince" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="PermanentAddress.SelectedDistrict"></label>
        <select asp-for="PermanentAddress.SelectedDistrict" class="form-control district-dropdown"
            id="PermanentAddress_SelectedDistrict">
            <option value="">-- Select District --</option>
        </select>
        <span asp-validation-for="PermanentAddress.SelectedDistrict" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="PermanentAddress.Municipality"></label>
        <input asp-for="PermanentAddress.Municipality" class="form-control" />
        <span asp-validation-for="PermanentAddress.Municipality" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="PermanentAddress.Ward"></label>
        <input asp-for="PermanentAddress.Ward" class="form-control" type="number" />
        <span asp-validation-for="PermanentAddress.Ward" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="PermanentAddress.Tole"></label>
        <input asp-for="PermanentAddress.Tole" class="form-control" />
        <span asp-validation-for="PermanentAddress.Tole" class="text-danger"></span>
    </div>

    <hr />

    <h4>Temporary Address (if different)</h4>

    <div class="form-group">
        <label asp-for="TemporaryAddress.SelectedProvince"></label>
        <select asp-for="TemporaryAddress.SelectedProvince" class="form-control province-dropdown"
            data-district-dropdown-id="TemporaryAddress_SelectedDistrict">
            <option value="">-- Select Province --</option>
        </select>
        <span asp-validation-for="TemporaryAddress.SelectedProvince" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TemporaryAddress.SelectedDistrict"></label>
        <select asp-for="TemporaryAddress.SelectedDistrict" class="form-control district-dropdown"
            id="TemporaryAddress_SelectedDistrict">
            <option value="">-- Select District --</option>
        </select>
        <span asp-validation-for="TemporaryAddress.SelectedDistrict" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TemporaryAddress.Municipality"></label>
        <input asp-for="TemporaryAddress.Municipality" class="form-control" />
        <span asp-validation-for="TemporaryAddress.Municipality" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TemporaryAddress.Ward"></label>
        <input asp-for="TemporaryAddress.Ward" class="form-control" type="number" />
        <span asp-validation-for="TemporaryAddress.Ward" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="TemporaryAddress.Tole"></label>
        <input asp-for="TemporaryAddress.Tole" class="form-control" />
        <span asp-validation-for="TemporaryAddress.Tole" class="text-danger"></span>
    </div>

    <hr />
    <hr />

    @* Bank Details (BankDetailFormViewModel) *@
    <h4>Bank Details</h4>
    <div class="form-group">
        <label asp-for="BankDetails.BankName"></label>
        <input asp-for="BankDetails.BankName" class="form-control" />
        <span asp-validation-for="BankDetails.BankName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="BankDetails.AccountNumber"></label>
        <input asp-for="BankDetails.AccountNumber" class="form-control" />
        <span asp-validation-for="BankDetails.AccountNumber" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="BankDetails.Branch"></label>
        <input asp-for="BankDetails.Branch" class="form-control" />
        <span asp-validation-for="BankDetails.Branch" class="text-danger"></span>
    </div>

    <hr />

    @* Other Details (OtherDetailsFormViewModel) *@
    <h4>Other Details</h4>
    <div class="form-group">
        <label asp-for="OtherDetails.FatherName"></label>
        <input asp-for="OtherDetails.FatherName" class="form-control" />
        <span asp-validation-for="OtherDetails.FatherName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="OtherDetails.MotherName"></label>
        <input asp-for="OtherDetails.MotherName" class="form-control" />
        <span asp-validation-for="OtherDetails.MotherName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="OtherDetails.GrandFatherName"></label>
        <input asp-for="OtherDetails.GrandFatherName" class="form-control" />
        <span asp-validation-for="OtherDetails.GrandFatherName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="OtherDetails.SpouseName"></label>
        <input asp-for="OtherDetails.SpouseName" class="form-control" />
        <span asp-validation-for="OtherDetails.SpouseName" class="text-danger"></span>
    </div>

    <hr />

    <h4>Nominee Details</h4>
    <div class="form-group">
        <label asp-for="Nominee.FullName"></label>
        <input asp-for="Nominee.FullName" class="form-control" />
        <span asp-validation-for="Nominee.FullName" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Nominee.Relationship"></label>
        <input asp-for="Nominee.Relationship" class="form-control" />
        <span asp-validation-for="Nominee.Relationship" class="text-danger"></span>
    </div>
    <div class="form-group">
        <label asp-for="Nominee.CitizenshipNumber"></label>
        <input asp-for="Nominee.CitizenshipNumber" class="form-control" />
        <span asp-validation-for="Nominee.CitizenshipNumber" class="text-danger"></span>




        <div class="form-group">
            <input type="submit" value="Submit KYC" class="btn btn-primary" />
        </div>
</form>

@section Scripts {
@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>

    document.addEventListener('DOMContentLoaded', function () {


        const provinceDropdowns = document.querySelectorAll('.province-dropdown');

        fetch('/api/lookupapi/provinces')
            .then(response => response.json())
            .then(provinces => {
                console.log('Provinces loaded:', provinces);
                provinceDropdowns.forEach(function (provinceSelectElement) {
                    // Remove all options except the first (placeholder)
                    provinceSelectElement.innerHTML = '<option value="">-- Select Province --</option>';
                    if (provinces && provinces.length > 0) {
                        provinces.forEach(function (province) {
                            let option = document.createElement('option');
                            option.value = province.id;
                            option.textContent = province.name;
                            provinceSelectElement.appendChild(option);
                        });
                    }
                });
            })
            .catch(error => {
                console.error('Error loading provinces:', error);
                provinceDropdowns.forEach(function (provinceSelectElement) {
                    provinceSelectElement.innerHTML = '<option value="">-- Error Loading Provinces --</option>';
                });
            });
        const citizenshipDistrictSelect = document.querySelector('.citizenship-district-dropdown');
        if (citizenshipDistrictSelect) {
            fetch('/api/LookupApi/districts')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(districts => {
                    citizenshipDistrictSelect.innerHTML = '<option value="">-- Select District --</option>';
                    console.log('Citizenship districts loaded:', districts);

                    if (districts && districts.length > 0) {
                        districts.forEach(function (district) {
                            let option = document.createElement('option');
                            option.value = district.name;
                            option.textContent = district.name;
                            citizenshipDistrictSelect.appendChild(option);
                        });
                    } else {
                        citizenshipDistrictSelect.innerHTML = '<option value="">-- No Districts Available --</option>';
                    }
                })
                .catch(error => {
                    console.error('Error loading citizenship districts:', error);
                    citizenshipDistrictSelect.innerHTML = '<option value="">-- Error Loading Districts --</option>';
                });
        }
        provinceDropdowns.forEach(function (provinceSelectElement) {
            provinceSelectElement.addEventListener('change', async function (event) {
                const selectedProvince = event.target.value;
                const districtDropdownId = event.target.dataset.districtDropdownId;
                const districtSelectElement = document.getElementById(districtDropdownId);

                if (!districtSelectElement) {
                    console.error('District dropdown not found with ID:', districtDropdownId);
                    return;
                }

                districtSelectElement.innerHTML = ''; // Clear existing options
                let loadingOption = document.createElement('option');
                loadingOption.value = '';
                loadingOption.textContent = '-- Loading Districts --';
                districtSelectElement.appendChild(loadingOption);

                if (selectedProvince && selectedProvince !== '') {
                    try {
                        const response = await fetch('/api/LookupApi/districts/' + encodeURIComponent(selectedProvince));
                        console.log('Fetching districts for province:', response);
                        if (!response.ok) {
                            console.error("Error fetching districts. Status:", response.status);
                            districtSelectElement.innerHTML = ''; // Clear
                            let errorOption = document.createElement('option');
                            errorOption.value = '';
                            errorOption.textContent = '-- Error Loading --';
                            districtSelectElement.appendChild(errorOption);
                            return;
                        }

                        const districts = await response.json();

                        districtSelectElement.innerHTML = '';
                        let defaultOption = document.createElement('option');
                        defaultOption.value = '';
                        defaultOption.textContent = '-- Select District --';
                        districtSelectElement.appendChild(defaultOption);

                        if (districts && districts.length > 0) {
                            districts.forEach(function (district) {
                                let option = document.createElement('option');
                                option.value = district.name;
                                option.textContent = district.name;
                                districtSelectElement.appendChild(option);
                            });
                        } else {
                            districtSelectElement.innerHTML = ''; // Clear
                            let noDistrictOption = document.createElement('option');
                            noDistrictOption.value = '';
                            noDistrictOption.textContent = '-- No Districts Found --';
                            districtSelectElement.appendChild(noDistrictOption);
                        }
                    } catch (error) {
                        console.error("Network error or other issue fetching districts:", error);
                        districtSelectElement.innerHTML = ''; // Clear
                        let networkErrorOption = document.createElement('option');
                        networkErrorOption.value = '';
                        networkErrorOption.textContent = '-- Error Loading (Network) --';
                        districtSelectElement.appendChild(networkErrorOption);
                    }
                } else {
                    districtSelectElement.innerHTML = ''; // Clear
                    let selectProvinceOption = document.createElement('option');
                    selectProvinceOption.value = '';
                    selectProvinceOption.textContent = '-- Select Province First --';
                    districtSelectElement.appendChild(selectProvinceOption);
                }
            });
        });


    });
</script>}
@section Styles {
<style>
    /* Add red asterisk to required fields automatically */
    .form-group label[for] {
        position: relative;
    }

    /* Target labels that have required inputs */
    .form-group:has(input[data-val-required]) label::after,
    .form-group:has(select[data-val-required]) label::after,
    .form-group:has(textarea[data-val-required]) label::after {
        content: " *";
        color: #dc3545;
        font-weight: bold;
        margin-left: 2px;
    }

    /* Fallback for browsers that don't support :has() */
    .required-field::after {
        content: " *";
        color: #dc3545;
        font-weight: bold;
        margin-left: 2px;
    }
</style> }